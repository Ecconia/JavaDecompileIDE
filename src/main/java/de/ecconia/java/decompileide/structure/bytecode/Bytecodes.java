package de.ecconia.java.decompileide.structure.bytecode;

import java.io.IOException;

import de.ecconia.java.decompileide.CustomDataInput;
import de.ecconia.java.decompileide.structure.bytecode.BytecodeWTArgs.ArgType;
import de.ecconia.java.decompileide.structure.constantpool.ConstantPool;

public class Bytecodes
{
	private static final Bytecode[] bytecodes = {
		new Bytecode("nop"),
		new Bytecode("aconst_null"),
		new Bytecode("aconst_m1"),
		new Bytecode("iconst_0"),
		new Bytecode("iconst_1"),
		new Bytecode("iconst_2"),
		new Bytecode("iconst_3"),
		new Bytecode("iconst_4"),
		new Bytecode("iconst_5"),
		new Bytecode("lconst_0"),
		new Bytecode("lconst_1"),
		new Bytecode("fconst_0"),
		new Bytecode("fconst_1"),
		new Bytecode("fconst_2"),
		new Bytecode("dconst_0"),
		new Bytecode("dconst_1"),
		new BytecodeWTArgs("bipush", ArgType.Byte),
		new BytecodeWTArgs("sipush", ArgType.Short),
		new BytecodeWTArgs("ldc", ArgType.PoolSmallIndexValue),
		new BytecodeWTArgs("ldc_w", ArgType.PoolIndexValue),
		new BytecodeWTArgs("ldc2_w", ArgType.PoolIndexBigValue),
		new BytecodeWTArgs("iload", ArgType.Var),
		new BytecodeWTArgs("lload", ArgType.Var),
		new BytecodeWTArgs("fload", ArgType.Var),
		new BytecodeWTArgs("dload", ArgType.Var),
		new BytecodeWTArgs("aload", ArgType.Var),
		new Bytecode("iload_0"),
		new Bytecode("iload_1"),
		new Bytecode("iload_2"),
		new Bytecode("iload_3"),
		new Bytecode("lload_0"),
		new Bytecode("lload_1"),
		new Bytecode("lload_2"),
		new Bytecode("lload_3"),
		new Bytecode("fload_0"),
		new Bytecode("fload_1"),
		new Bytecode("fload_2"),
		new Bytecode("fload_3"),
		new Bytecode("dload_0"),
		new Bytecode("dload_1"),
		new Bytecode("dload_2"),
		new Bytecode("dload_3"),
		new Bytecode("aload_0"),
		new Bytecode("aload_1"),
		new Bytecode("aload_2"),
		new Bytecode("aload_3"),
		new Bytecode("iaload"),
		new Bytecode("laload"),
		new Bytecode("faload"),
		new Bytecode("daload"),
		new Bytecode("aaload"),
		new Bytecode("baload"),
		new Bytecode("caload"),
		new Bytecode("saload"),
		new BytecodeWTArgs("istore", ArgType.Var),
		new BytecodeWTArgs("lstore", ArgType.Var),
		new BytecodeWTArgs("fstore", ArgType.Var),
		new BytecodeWTArgs("dstore", ArgType.Var),
		new BytecodeWTArgs("astore", ArgType.Var),
		new Bytecode("istore_0"),
		new Bytecode("istore_1"),
		new Bytecode("istore_2"),
		new Bytecode("istore_3"),
		new Bytecode("lstore_0"),
		new Bytecode("lstore_1"),
		new Bytecode("lstore_2"),
		new Bytecode("lstore_3"),
		new Bytecode("fstore_0"),
		new Bytecode("fstore_1"),
		new Bytecode("fstore_2"),
		new Bytecode("fstore_3"),
		new Bytecode("dstore_0"),
		new Bytecode("dstore_1"),
		new Bytecode("dstore_2"),
		new Bytecode("dstore_3"),
		new Bytecode("astore_0"),
		new Bytecode("astore_1"),
		new Bytecode("astore_2"),
		new Bytecode("astore_3"),
		new Bytecode("iastore"),
		new Bytecode("lastore"),
		new Bytecode("fastore"),
		new Bytecode("dastore"),
		new Bytecode("aastore"),
		new Bytecode("bastore"),
		new Bytecode("castore"),
		new Bytecode("sastore"),
		new Bytecode("pop"),
		new Bytecode("pop2"),
		new Bytecode("dup"),
		new Bytecode("dup_x1"),
		new Bytecode("dup_x2"),
		new Bytecode("dup2"),
		new Bytecode("dup2_x1"),
		new Bytecode("dup2_x2"),
		new Bytecode("swap"),
		new Bytecode("iadd"),
		new Bytecode("ladd"),
		new Bytecode("fadd"),
		new Bytecode("dadd"),
		new Bytecode("isub"),
		new Bytecode("lsub"),
		new Bytecode("fsub"),
		new Bytecode("dsub"),
		new Bytecode("imul"),
		new Bytecode("lmul"),
		new Bytecode("fmul"),
		new Bytecode("dmul"),
		new Bytecode("idiv"),
		new Bytecode("ldiv"),
		new Bytecode("fdiv"),
		new Bytecode("ddiv"),
		new Bytecode("irem"),
		new Bytecode("lrem"),
		new Bytecode("frem"),
		new Bytecode("drem"),
		new Bytecode("ineg"),
		new Bytecode("lneg"),
		new Bytecode("fneg"),
		new Bytecode("dneg"),
		new Bytecode("ishl"),
		new Bytecode("lshl"),
		new Bytecode("ishr"),
		new Bytecode("lshr"),
		new Bytecode("iushr"),
		new Bytecode("lushr"),
		new Bytecode("iand"),
		new Bytecode("land"),
		new Bytecode("ior"),
		new Bytecode("lor"),
		new Bytecode("ixor"),
		new Bytecode("lxor"),
		new BytecodeWTArgs("iinc", ArgType.Var, ArgType.Byte),
		new Bytecode("i2l"),
		new Bytecode("i2f"),
		new Bytecode("i2d"),
		new Bytecode("l2i"),
		new Bytecode("l2f"),
		new Bytecode("l2d"),
		new Bytecode("f2i"),
		new Bytecode("f2l"),
		new Bytecode("f2d"),
		new Bytecode("d2i"),
		new Bytecode("d2l"),
		new Bytecode("d2f"),
		new Bytecode("i2b"),
		new Bytecode("i2c"),
		new Bytecode("i2s"),
		new Bytecode("lcmp"),
		new Bytecode("fcmpl"),
		new Bytecode("fcmpg"),
		new Bytecode("dcmpl"),
		new Bytecode("dcmpg"),
		new BytecodeWTArgs("ifeq", ArgType.RelBranchLoc),
		new BytecodeWTArgs("ifne", ArgType.RelBranchLoc),
		new BytecodeWTArgs("iflt", ArgType.RelBranchLoc),
		new BytecodeWTArgs("ifge", ArgType.RelBranchLoc),
		new BytecodeWTArgs("ifgt", ArgType.RelBranchLoc),
		new BytecodeWTArgs("ifle", ArgType.RelBranchLoc),
		new BytecodeWTArgs("if_icmpeq", ArgType.RelBranchLoc),
		new BytecodeWTArgs("if_icmpne", ArgType.RelBranchLoc),
		new BytecodeWTArgs("if_icmplt", ArgType.RelBranchLoc),
		new BytecodeWTArgs("if_icmpge", ArgType.RelBranchLoc),
		new BytecodeWTArgs("if_icmpgt", ArgType.RelBranchLoc),
		new BytecodeWTArgs("if_icmple", ArgType.RelBranchLoc),
		new BytecodeWTArgs("if_acmpeq", ArgType.RelBranchLoc),
		new BytecodeWTArgs("if_acmpne", ArgType.RelBranchLoc),
		new BytecodeWTArgs("goto", ArgType.RelBranchLoc),
		new BytecodeWTArgs("jsr", ArgType.RelBranchLoc),
		new BytecodeWTArgs("ret", ArgType.Var),
		new BytecodeWTArgs("tableswitch", ArgType.Align, ArgType.Int, ArgType.Range),
		new BytecodeWTArgs("lookupswitch", ArgType.Align, ArgType.Int, ArgType.NPairs),
		new Bytecode("ireturn"),
		new Bytecode("lreturn"),
		new Bytecode("freturn"),
		new Bytecode("dreturn"),
		new Bytecode("areturn"),
		new Bytecode("return"),
		new BytecodeWTArgs("getstatic", ArgType.PoolIndexFieldRef),
		new BytecodeWTArgs("putstatic", ArgType.PoolIndexFieldRef),
		new BytecodeWTArgs("getfield", ArgType.PoolIndexFieldRef),
		new BytecodeWTArgs("putfield", ArgType.PoolIndexFieldRef),
		new BytecodeWTArgs("invokevirtual", ArgType.PoolIndexMethodRef),
		new BytecodeWTArgs("invokespecial", ArgType.PoolIndexMethodRef),
		new BytecodeWTArgs("invokestatic", ArgType.PoolIndexMethodOrInterfaceMethodRef),
		new BytecodeWTArgs("invokeinterface", ArgType.PoolIndexInterfaceMethodRef, ArgType.UByte, ArgType.UByte),
		new BytecodeWTArgs("invokedynamic", ArgType.PoolIndexInvokeDynamic, ArgType.UByte, ArgType.UByte),
		new BytecodeWTArgs("new", ArgType.PoolIndexClassRef),
		new BytecodeWTArgs("newarray", ArgType.UByte), //TBI: What does this one do?
		new BytecodeWTArgs("anewarray", ArgType.PoolIndexClassRef),
		new Bytecode("arraylength"),
		new Bytecode("athrow"),
		new BytecodeWTArgs("checkcast", ArgType.PoolIndexClassRef),
		new BytecodeWTArgs("instanceof", ArgType.PoolIndexClassRef),
		new Bytecode("monitorenter"),
		new Bytecode("monitorexit"),
		new BytecodeWTArgs("wide", ArgType.Align, ArgType.CustomWide), //TODO: Test with something, anything!! 
		new BytecodeWTArgs("multianewarray", ArgType.PoolIndexClassRef, ArgType.UByte),
		new BytecodeWTArgs("ifnull", ArgType.RelBranchLoc),
		new BytecodeWTArgs("ifnonnull", ArgType.RelBranchLoc),
		new BytecodeWTArgs("goto_w", ArgType.RelBranchLocInt),
		new BytecodeWTArgs("jsr_w", ArgType.RelBranchLocInt),
		new Bytecode("breakpoint"),
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		new Bytecode("impdep1"),
		new Bytecode("impdep2"),
	};
	
	public static void printFormatted(String prefix, CustomDataInput d, ConstantPool pool) throws IOException
	{
		int opcode = d.readUnsignedByte();
		Bytecode code = bytecodes[opcode];
		if(code == null)
		{
			throw new RuntimeException("Unsupported opcode call: " + opcode);
		}
		
		String[] args = code.parse(d, pool);
		System.out.println(prefix + code.getName() + " " + String.join(", ", args));
	}

	public static String getNameByOpcode(int opcode)
	{
		return bytecodes[opcode].getName();
	}
}
